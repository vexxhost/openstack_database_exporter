// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package octavia

import (
	"context"
	"database/sql"
)

const GetAllAmphora = `-- name: GetAllAmphora :many
SELECT
    id,
    compute_id,
    status,
    load_balancer_id,
    lb_network_ip,
    ha_ip,
    role,
    cert_expiration
FROM
    amphora
`

func (q *Queries) GetAllAmphora(ctx context.Context) ([]Amphora, error) {
	rows, err := q.db.QueryContext(ctx, GetAllAmphora)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Amphora
	for rows.Next() {
		var i Amphora
		if err := rows.Scan(
			&i.ID,
			&i.ComputeID,
			&i.Status,
			&i.LoadBalancerID,
			&i.LbNetworkIp,
			&i.HaIp,
			&i.Role,
			&i.CertExpiration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllLoadBalancersWithVip = `-- name: GetAllLoadBalancersWithVip :many
SELECT
    lb.id,
    lb.project_id,
    lb.name,
    lb.provisioning_status,
    lb.operating_status,
    lb.provider,
    v.ip_address as vip_address
FROM
    load_balancer lb
    LEFT JOIN vip v ON lb.id = v.load_balancer_id
`

type GetAllLoadBalancersWithVipRow struct {
	ID                 string
	ProjectID          sql.NullString
	Name               sql.NullString
	ProvisioningStatus string
	OperatingStatus    string
	Provider           sql.NullString
	VipAddress         sql.NullString
}

func (q *Queries) GetAllLoadBalancersWithVip(ctx context.Context) ([]GetAllLoadBalancersWithVipRow, error) {
	rows, err := q.db.QueryContext(ctx, GetAllLoadBalancersWithVip)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllLoadBalancersWithVipRow
	for rows.Next() {
		var i GetAllLoadBalancersWithVipRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.ProvisioningStatus,
			&i.OperatingStatus,
			&i.Provider,
			&i.VipAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetAllPools = `-- name: GetAllPools :many
SELECT
    id,
    project_id,
    name,
    protocol,
    lb_algorithm,
    operating_status,
    load_balancer_id,
    provisioning_status
FROM
    pool
`

type GetAllPoolsRow struct {
	ID                 string
	ProjectID          sql.NullString
	Name               sql.NullString
	Protocol           string
	LbAlgorithm        string
	OperatingStatus    string
	LoadBalancerID     sql.NullString
	ProvisioningStatus string
}

func (q *Queries) GetAllPools(ctx context.Context) ([]GetAllPoolsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetAllPools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPoolsRow
	for rows.Next() {
		var i GetAllPoolsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Name,
			&i.Protocol,
			&i.LbAlgorithm,
			&i.OperatingStatus,
			&i.LoadBalancerID,
			&i.ProvisioningStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
