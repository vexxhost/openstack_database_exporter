// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package keystone

import (
	"context"
	"database/sql"
)

const GetDomainMetrics = `-- name: GetDomainMetrics :many
SELECT 
    id,
    name,
    COALESCE(description, '') as description,
    enabled
FROM project 
WHERE is_domain = 1 AND id != '<<keystone.domain.root>>'
`

type GetDomainMetricsRow struct {
	ID          string
	Name        string
	Description string
	Enabled     sql.NullBool
}

func (q *Queries) GetDomainMetrics(ctx context.Context) ([]GetDomainMetricsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetDomainMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDomainMetricsRow
	for rows.Next() {
		var i GetDomainMetricsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetGroupMetrics = `-- name: GetGroupMetrics :many
SELECT 
    id,
    domain_id,
    name,
    COALESCE(description, '') as description
FROM ` + "`" + `group` + "`" + `
`

type GetGroupMetricsRow struct {
	ID          string
	DomainID    string
	Name        string
	Description string
}

func (q *Queries) GetGroupMetrics(ctx context.Context) ([]GetGroupMetricsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetGroupMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupMetricsRow
	for rows.Next() {
		var i GetGroupMetricsRow
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetProjectMetrics = `-- name: GetProjectMetrics :many
SELECT 
    p.id,
    p.name,
    COALESCE(p.description, '') as description,
    p.enabled,
    p.domain_id,
    COALESCE(p.parent_id, '') as parent_id,
    p.is_domain,
    COALESCE(GROUP_CONCAT(pt.name SEPARATOR ','), '') as tags
FROM project p
LEFT JOIN project_tag pt ON p.id = pt.project_id
WHERE p.is_domain = 0
GROUP BY p.id, p.name, p.description, p.enabled, p.domain_id, p.parent_id, p.is_domain
`

type GetProjectMetricsRow struct {
	ID          string
	Name        string
	Description string
	Enabled     sql.NullBool
	DomainID    string
	ParentID    string
	IsDomain    bool
	Tags        interface{}
}

func (q *Queries) GetProjectMetrics(ctx context.Context) ([]GetProjectMetricsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetProjectMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectMetricsRow
	for rows.Next() {
		var i GetProjectMetricsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Enabled,
			&i.DomainID,
			&i.ParentID,
			&i.IsDomain,
			&i.Tags,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRegionMetrics = `-- name: GetRegionMetrics :many
SELECT 
    id,
    COALESCE(description, '') as description,
    COALESCE(parent_region_id, '') as parent_region_id
FROM region
`

type GetRegionMetricsRow struct {
	ID             string
	Description    string
	ParentRegionID string
}

func (q *Queries) GetRegionMetrics(ctx context.Context) ([]GetRegionMetricsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetRegionMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRegionMetricsRow
	for rows.Next() {
		var i GetRegionMetricsRow
		if err := rows.Scan(&i.ID, &i.Description, &i.ParentRegionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUserMetrics = `-- name: GetUserMetrics :many
SELECT 
    id,
    enabled,
    domain_id,
    COALESCE(default_project_id, '') as default_project_id,
    created_at,
    last_active_at
FROM user
`

type GetUserMetricsRow struct {
	ID               string
	Enabled          sql.NullBool
	DomainID         string
	DefaultProjectID string
	CreatedAt        sql.NullTime
	LastActiveAt     sql.NullTime
}

func (q *Queries) GetUserMetrics(ctx context.Context) ([]GetUserMetricsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetUserMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserMetricsRow
	for rows.Next() {
		var i GetUserMetricsRow
		if err := rows.Scan(
			&i.ID,
			&i.Enabled,
			&i.DomainID,
			&i.DefaultProjectID,
			&i.CreatedAt,
			&i.LastActiveAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
