// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package glance

import (
	"context"
	"database/sql"
	"time"
)

const GetAllImages = `-- name: GetAllImages :many
SELECT
    id,
    name,
    size,
    status,
    owner,
    visibility,
    disk_format,
    container_format,
    checksum,
    created_at,
    updated_at,
    min_disk,
    min_ram,
    protected,
    virtual_size,
    os_hidden,
    os_hash_algo,
    os_hash_value
FROM
    images
WHERE
    deleted = 0
`

type GetAllImagesRow struct {
	ID              string
	Name            sql.NullString
	Size            sql.NullInt64
	Status          string
	Owner           sql.NullString
	Visibility      ImagesVisibility
	DiskFormat      sql.NullString
	ContainerFormat sql.NullString
	Checksum        sql.NullString
	CreatedAt       time.Time
	UpdatedAt       sql.NullTime
	MinDisk         int32
	MinRam          int32
	Protected       bool
	VirtualSize     sql.NullInt64
	OsHidden        bool
	OsHashAlgo      sql.NullString
	OsHashValue     sql.NullString
}

func (q *Queries) GetAllImages(ctx context.Context) ([]GetAllImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, GetAllImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllImagesRow
	for rows.Next() {
		var i GetAllImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Size,
			&i.Status,
			&i.Owner,
			&i.Visibility,
			&i.DiskFormat,
			&i.ContainerFormat,
			&i.Checksum,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MinDisk,
			&i.MinRam,
			&i.Protected,
			&i.VirtualSize,
			&i.OsHidden,
			&i.OsHashAlgo,
			&i.OsHashValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetImageCount = `-- name: GetImageCount :one
SELECT
    COUNT(*) as count
FROM
    images
WHERE
    deleted = 0
`

func (q *Queries) GetImageCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetImageCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
