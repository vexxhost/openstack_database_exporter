// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package neutron

import (
	"context"
	"database/sql"
)

const GetHARouterAgentPortBindingsWithAgents = `-- name: GetHARouterAgentPortBindingsWithAgents :many
SELECT
    ha.router_id,
    ha.l3_agent_id,
    ha.state,
    a.host as agent_host,
    a.admin_state_up as agent_admin_state_up,
    a.heartbeat_timestamp as agent_heartbeat_timestamp
FROM
    ha_router_agent_port_bindings ha
    LEFT JOIN agents a ON ha.l3_agent_id = a.id
`

type GetHARouterAgentPortBindingsWithAgentsRow struct {
	RouterID                string
	L3AgentID               sql.NullString
	State                   NullHaRouterAgentPortBindingsState
	AgentHost               sql.NullString
	AgentAdminStateUp       sql.NullBool
	AgentHeartbeatTimestamp sql.NullTime
}

func (q *Queries) GetHARouterAgentPortBindingsWithAgents(ctx context.Context) ([]GetHARouterAgentPortBindingsWithAgentsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetHARouterAgentPortBindingsWithAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHARouterAgentPortBindingsWithAgentsRow
	for rows.Next() {
		var i GetHARouterAgentPortBindingsWithAgentsRow
		if err := rows.Scan(
			&i.RouterID,
			&i.L3AgentID,
			&i.State,
			&i.AgentHost,
			&i.AgentAdminStateUp,
			&i.AgentHeartbeatTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
