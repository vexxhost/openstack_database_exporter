// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package magnum

import (
	"context"
	"database/sql"
)

const GetClusterMetrics = `-- name: GetClusterMetrics :many
SELECT 
    c.uuid,
    c.name,
    COALESCE(c.stack_id, '') as stack_id,
    COALESCE(c.status, '') as status,
    c.project_id,
    COALESCE(master_ng.node_count, 0) as master_count,
    COALESCE(worker_ng.node_count, 0) as node_count
FROM cluster c
LEFT JOIN (
    SELECT cluster_id, SUM(node_count) as node_count
    FROM nodegroup 
    WHERE role = 'master'
    GROUP BY cluster_id
) master_ng ON c.uuid = master_ng.cluster_id
LEFT JOIN (
    SELECT cluster_id, SUM(node_count) as node_count
    FROM nodegroup 
    WHERE role = 'worker'
    GROUP BY cluster_id
) worker_ng ON c.uuid = worker_ng.cluster_id
`

type GetClusterMetricsRow struct {
	Uuid        sql.NullString
	Name        sql.NullString
	StackID     string
	Status      string
	ProjectID   sql.NullString
	MasterCount interface{}
	NodeCount   interface{}
}

func (q *Queries) GetClusterMetrics(ctx context.Context) ([]GetClusterMetricsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetClusterMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClusterMetricsRow
	for rows.Next() {
		var i GetClusterMetricsRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.StackID,
			&i.Status,
			&i.ProjectID,
			&i.MasterCount,
			&i.NodeCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
